<?php

// √ñka minnesgr√§ns och max CSV-f√§ltstorlek om det beh√∂vs
ini_set('memory_limit', '512M');
#ini_set('auto_detect_line_endings', true);


$expectedDataTypes = [
    'Price' => 'float',
    'Price / International' => 'float',
    'Compare-at price' => 'float',
    'Compare-at price / International' => 'float',
    'Cost per item' => 'float',
    'Charge tax' => 'bool',
    'Inventory quantity' => 'int',
    'Weight value (grams)' => 'int',
    'Requires shipping' => 'bool',
    'Gift card' => 'bool',
    'Continue selling when out of stock' => 'bool',
];


// Definiera kolumnerna som f√∂rv√§ntas i Shopify CSV-filen
// Dessa kolumner √§r baserade p√• Shopify's standard CSV-importformat
$SHOPIFY_COLUMNS = [
    "Title", "URL handle", "Description", "Vendor", "Product category", "Type", "Tags", "Published on online store",
    "Status", "SKU", "Barcode", "Option1 name", "Option1 value", "Option2 name", "Option2 value", "Option3 name",
    "Option3 value", "Price", "Price / International", "Compare-at price", "Compare-at price / International",
    "Cost per item", "Charge tax", "Tax code", "Inventory policy", "Inventory quantity", "Continue selling when out of stock",
    "Weight value (grams)", "Weight unit for display", "Requires shipping", "Fulfillment service", "Product image URL",
    "Image position", "Image alt text", "Variant image URL", "Gift card", "SEO title", "SEO description",
    "Google Shopping / Google product category", "Google Shopping / Gender", "Google Shopping / Age group",
    "Google Shopping / MPN", "Google Shopping / AdWords Grouping", "Google Shopping / AdWords labels",
    "Google Shopping / Condition", "Google Shopping / Custom product", "Google Shopping / Custom label 0",
    "Google Shopping / Custom label 1", "Google Shopping / Custom label 2", "Google Shopping / Custom label 3",
    "Google Shopping / Custom label 4", "Variant Inventory Tracker"
];

##################
##### HELPERS ####
##################

#Eftersom rawurlencode() kodar allt (√§ven : och /), 
#skapar vi en variant d√§r vi bevarar :/, 
#precis som quote(..., safe=':/') i Python:
function rawurlencode_image(string $url): string {
    // Dela upp p√• delar som inte ska kodas
    $parsed = parse_url($url);

    if (!isset($parsed['scheme']) || !isset($parsed['host'])) {
        // Om URL inte √§r giltig, koda hela
        return rawurlencode($url);
    }

    // √Öterbygg URL med kodad path/query, men bevara scheme och host
    $scheme = $parsed['scheme'] . '://';
    $host = $parsed['host'];
    $path = isset($parsed['path']) ? implode('/', array_map('rawurlencode', explode('/', ltrim($parsed['path'], '/')))) : '';
    $query = isset($parsed['query']) ? '?' . rawurlencode($parsed['query']) : '';

    return $scheme . $host . '/' . $path . $query;
}


# Helper function to convert values to the expected data type
function convertToType($value, $dataType) {
    // Konvertera null till tom str√§ng
    $value = trim((string)$value);

    // Hantera bool tidigt
    if ($dataType === 'bool') {
        return in_array(strtolower($value), ['true', '1', 'yes'], true);
    }

    // Hantera tomma v√§rden
    if ($value === '') {
        return $dataType === 'int' ? 0 :
               ($dataType === 'float' ? 0.0 : '');
    }

    // Typkonvertering med fallback
    try {
        switch ($dataType) {
            case 'int':
                return is_numeric($value) ? (int)$value : 0;
            case 'float':
                // Konvertera ev. svenska decimalkomma
                $value = str_replace(',', '.', $value);
                return is_numeric($value) ? (float)$value : 0.0;
            case 'string':
                return $value;
            default:
                return $value; // returnera som det √§r vid ok√§nt typnamn
        }
    } catch (Throwable $e) { // f√•ngar √§ven TypeError i PHP 7+
        return $dataType === 'int' ? 0 :
               ($dataType === 'float' ? 0.0 : '');
    }
}


$writtenHandles = [];

function makeUniqueHandle($baseHandle, &$writtenHandles, $suffix = null) {
    // Generera f√∂rsta unika f√∂rslag
    $uniqueHandle = $suffix !== null ? "{$baseHandle}-{$suffix}" : $baseHandle;

    // √ñka suffix tills det √§r unikt
    while (in_array($uniqueHandle, $writtenHandles, true)) {
        $suffix = $suffix === null ? 1 : $suffix + 1;
        $uniqueHandle = "{$baseHandle}-{$suffix}";
    }

    // L√§gg till i set
    $writtenHandles[] = $uniqueHandle;
    return $uniqueHandle;
}

#########################################################
# Function to determine if a row represents a main product
#########################################################
function isMainProduct(array $row): bool {
    $productType = $row['Typ'] ?? $row['Type'] ?? '';
    $productType = strtolower(trim($productType));

    return strpos($productType, 'simple') !== false || strpos($productType, 'variable') !== false;
}

function isVariant(array $row): bool {
    $productType = $row['Typ'] ?? $row['Type'] ?? '';
    $productType = strtolower(trim($productType));

    return strpos($productType, 'variation') !== false;
}

####################
# Function to sanitize titles
####################
function sanitizeTitle(string $title): string {
    // Beh√•ll bindestreck och svenska tecken, ta bort √∂vrigt
    $title = preg_replace('/[^a-zA-Z0-9\s√•√§√∂√Ö√Ñ√ñ\-]/u', '', $title);

    // G√∂r till gemener och trimma
    $title = mb_strtolower(trim($title), 'UTF-8');

    // Ers√§tt alla mellanslag med bindestreck
    $title = preg_replace('/\s+/', '-', $title);

    return $title;
}


#####################################################
# Function to choose mapping based on the input file
#####################################################
function chooseMappingFromFile(string $csvPath, string $delimiter = ','): array {
    if (!file_exists($csvPath)) {
        throw new Exception("‚ùå Filen hittades inte: $csvPath");
    }

    $handle = fopen($csvPath, 'r');
    if ($handle === false) {
        throw new Exception("‚ùå Kunde inte √∂ppna CSV-filen.");
    }

    // L√§s in header-rad (UTF-8-sig hanteras av PHP automatiskt i de flesta fall)
    $headers = fgetcsv($handle, 0, $delimiter, '"', '\\');    fclose($handle);

    if (!$headers) {
        throw new Exception("‚ùå CSV-filen saknar rubriker.");
    }

    // Svenska mapping
    $mappingSv = [
        'Namn' => 'Title',
        'Beskrivning' => 'Description',
        'Artikelnummer' => 'SKU',
        'Vikt (kg)' => 'Weight value (grams)',
        'Lager' => 'Inventory quantity',
        'Ordinarie pris' => 'Price',
        'Reapris' => 'Compare-at price',
        'Bilder' => 'Product image URL',
        'Synlighet i katalog' => 'Status',
        'Kort beskrivning' => 'SEO description',
        'Momsstatus' => 'Charge tax',
        'Momsklass' => 'Tax code',
        'Fraktklass' => 'Shipping Category',
        'GTIN, UPC, EAN eller ISBN' => 'Barcode',
        'Attribut 1 namn' => 'Option1 name',
        'Attribut 1 v√§rde(n)' => 'Option1 value',
        'Attribut 2 namn' => 'Option2 name',
        'Attribut 2 v√§rde(n)' => 'Option2 value',
        'Attribut 3 namn' => 'Option3 name',
        'Attribut 3 v√§rde(n)' => 'Option3 value',
        'Publicerad' => 'Published on online store'
    ];

    // Engelsk mapping
    $mappingEn = [
        'Name' => 'Title',
        'Description' => 'Description',
        'SKU' => 'SKU',
        'Weight (kg)' => 'Weight value (grams)',
        'Stock' => 'Inventory quantity',
        'Regular price' => 'Price',
        'Sale price' => 'Compare-at price',
        'Images' => 'Product image URL',
        'Visibility in catalog' => 'Status',
        'Short description' => 'SEO description',
        'Tax status' => 'Charge tax',
        'Tax class' => 'Tax code',
        'Shipping class' => 'Shipping Category'
    ];

    // Kontrollera om n√•got av mappningsnycklarna finns i headern
    foreach ($mappingSv as $key => $_) {
        if (in_array($key, $headers, true)) {
            echo "üìò Mapping: Svenska f√§lt identifierade\n";
            return $mappingSv;
        }
    }

    foreach ($mappingEn as $key => $_) {
        if (in_array($key, $headers, true)) {
            echo "üìô Mapping: Engelska f√§lt identifierade\n";
            return $mappingEn;
        }
    }

    throw new Exception("‚ùå Kunde inte identifiera l√§mplig mapping baserat p√• kolumnrubriker.");
}



function convertKgToGrams($value): string {
    if ($value === null || trim($value) === '') {
        return '0';
    }

    // F√∂rs√∂k konvertera till float och multiplicera
    try {
        $floatValue = (float)str_replace(',', '.', $value); // hanterar ev. svenska kommatecken
        return (string)(int)round($floatValue * 1000);
    } catch (Exception $e) {
        return '0';
    }
}

function cleanValue(?string $value): string {
    if ($value === null) {
        return '';
    }

    $trimmed = trim($value);
    if ($trimmed === '[]') {
        return '';
    }

    return $trimmed;
}

function sanitizeHtml($value): string {
    if (!is_string($value) || trim($value) === '') {
        return '';
    }

    // Ers√§tt radbrytningar med <br>
    $value = str_replace(["\r\n", "\n", '\\n'], '<br>', $value);

    // Ta bort flera mellanslag i rad
    $value = preg_replace('/\s+/', ' ', $value);

    // Escapa dubbla citattecken f√∂r CSV
    $value = str_replace('"', '""', $value);

    return trim($value);
}

function extractCategories(?string $categoryString): array {
    if ($categoryString === null || trim($categoryString) === '') {
        return ['', ''];
    }

    // Dela upp p√• ">"
    $categories = array_map('trim', explode('>', $categoryString));

    $productType = $categories[0] ?? '';
    $tags = implode(', ', $categories);

    return [$productType, $tags];
}

$variantFields = [
    "Compare-at price", "Inventory quantity", "Weight value (grams)", "Price",
    "Fulfillment service", "Requires shipping", "Charge tax", "Weight unit for display",
    "Option1 value", "Option1 name", "Option2 name", "Option2 value", "Option3 name", "Option3 value"
];

$optionNameMapping = [
    "Attribut 1 namn" => "Option1 name",
    "Attribut 1 v√§rde(n)" => "Option1 value",
    "Attribut 2 namn" => "Option2 name",
    "Attribut 2 v√§rde(n)" => "Option2 value",
    "Attribut 3 namn" => "Option3 name",
    "Attribut 3 v√§rde(n)" => "Option3 value"
];

$optionValueMapping = [
    "Storlek" => "Size",
    "F√§rg" => "Color",
    "Antal" => "Quantity",
    "Vikt" => "Weight",
    "Material" => "Material",
    "M√§rke" => "Brand",
    "Typ" => "Type",
    "Modell" => "Model",
    "L√§ngd" => "Length",
    "Bredd" => "Width",
    "H√∂jd" => "Height",
    "Diameter" => "Diameter",
    "Volym" => "Volume",
    "Storleksguide" => "Size guide",
    "F√§rgkod" => "Color code",
    "F√§rgnamn" => "Color name",
    "F√§rggrupp" => "Color group",
    "F√§rgtyp" => "Color type",
    "Smak" => "Flavor",
    "Stil" => "Style",
    "Fotstorlek" => "Foot Size",
    "Summa" => "Total",
    "Swarovski" => "Crystal Type",
    "Swarovski GG08" => "Crystal Type GG08",
    "Swarovski SS10" => "Crystal Type SS10",
    "B√•ge" => "Frame",
    "E-Logga" => "E-Logo",
    "Midja" => "Waist",
    "Rondin G9" => "Rondin G9",
    "Sp√§nne" => "Buckle",
    "Top" => "Top",
    "Vad" => "Calf",
    "Swarovski SS16" => "Crystal Type SS16",
    "Ben" => "Leg",
    "Extra Storlek" => "Extra Size",
    "Infinito l√§der Top" => "Infinito Leather Top",
    "Sida" => "Side",
    "Skaft" => "Shaft",
    "Skal" => "Shell"
    // L√§gg till fler vid behov
];

########################
##### MAIN PROCESS ####
########################

function replaceHeaderAndTransformData(
    string $inputFile,
    string $outputFile,
    array $mapping,
    string $delimiter = ',',
    ?int $maxRows = null
) {

    global $SHOPIFY_COLUMNS, $expectedDataTypes; // dessa m√•ste vara definierade i main eller globalt
    global $writtenHandles, $variantFields, $optionNameMapping, $optionValueMapping;

    $totalProducts = 0;
    $totalVariants = 0;
    $totalImages = 0;

    $requiredFields = [
        'URL handle' => '',
        'Vendor' => 'THS',
        'Published on online store' => 'TRUE',
        'Product category' => '',
        'Tags' => '',
        'Option1 name' => '',
        'Option1 value' => '',
        'Option2 name' => '',
        'Option2 value' => '',
        'Option3 name' => '',
        'Option3 value' => '',
        'Fulfillment service' => 'manual',
        'Requires shipping' => 'TRUE',
        'Inventory policy' => '',
        'Charge tax' => 'TRUE',
        'Gift card' => 'FALSE',
        'Weight unit for display' => 'kg',
        'Continue selling when out of stock' => 'TRUE',
        'Variant Inventory Tracker' => 'shopify'
    ];
    $finalHeader = $SHOPIFY_COLUMNS;

    // √ñppna CSV-filen korrekt
    $handle = fopen($inputFile, 'r');
    if ($handle === false) {
        throw new Exception("‚ùå Kunde inte √∂ppna input-filen: $inputFile");
    }
    
     // L√§s rubrikraden
    $headers = fgetcsv($handle, 0, $delimiter, '"', '\\');
    if (!$headers) {
        throw new Exception("‚ùå Kunde inte l√§sa rubriker fr√•n CSV-filen.");
    }


    ###################################################################
    # V√§lj ut kolumner som finns i input-filen och anv√§nds i mappningen
    ####################################################################

    foreach ($mapping as $field) {
        if (!in_array($field, $finalHeader, true)) {
            $finalHeader[] = $field;
        }
    }

    // Filtrera rubriker som finns i mapping
    $selectedFields = array_filter($headers, function ($field) use ($mapping) {
        return array_key_exists($field, $mapping);
    });

    ##############################################
    # S√§kerst√§ll att alla n√∂dv√§ndiga kolumner finns med i slutgiltiga headern
    ##############################################

    // L√§gg till alla n√∂dv√§ndiga f√§lt om de saknas
    foreach (array_keys($requiredFields) as $requiredField) {
        if (!in_array($requiredField, $finalHeader, true)) {
            $finalHeader[] = $requiredField;
        }
    }

    // L√§gg till alla mappade f√§lt som saknas
    foreach ($mapping as $field) {
        if (!in_array($field, $finalHeader, true)) {
            $finalHeader[] = $field;
        }
    }

    ##############################################
    #  Initiera struktur f√∂r att lagra produkter efter deras "handle"
    ##############################################
    ## products = defaultdict(lambda: {'main': None, 'variants': [], 'images': []})
    #defaultdict √§r inte inbyggt i PHP, s√• vi anv√§nder en vanlig array
    $products = []; // ['handle' => ['main' => ..., 'variants' => [...], 'images' => [...]]]

    $rowCount = 0;

    while (($row = fgetcsv($handle, 0, $delimiter, '"', '\\')) !== false) {
        if ($maxRows !== null && $rowCount >= $maxRows) {
            break;
        }

        $rowCount++;
        $assoc = array_combine($headers, $row);

        // Ny tom rad som ska fyllas (motsvarar new_row = {})
        $newRow = [];

        ##############################################
        #  Mappa f√§lt fr√•n input ‚Üí Shopify-f√§lt + g√∂r ev. konvertering
        ##############################################
        foreach ($selectedFields as $field) {
            $value = trim($assoc[$field] ?? '');

            $mappedField = $mapping[$field];

            // Konvertera vikt till gram
            if ($mappedField === "Weight value (grams)") {
                $value = convertKgToGrams($value);
            }

            // Extra trim p√• prisf√§lt
            if ($mappedField === "Price") {
                $value = trim($value);
            }

            // Sanera HTML och escapa radbrytningar + citattecken
            if (in_array($mappedField, ["Description", "SEO description"], true)) {
                $value = sanitizeHtml($value);
            }

            // Sanera all text f√∂r s√§ker import (om str√§ng)
            if (is_string($value)) {
                $value = sanitizeHtml($value);
            }

            // Rensa v√§rdet (t.ex. "[]")
            $value = cleanValue($value);

            // Tilldela till r√§tt Shopify-f√§lt
            $newRow[$mappedField] = $value;
        }

        ##################################################
        # √ñvers√§tt svenska attributnamn/v√§rden till engelska
        ##################################################
        foreach ($optionNameMapping as $swedishKey => $englishKey) {
            if (isset($assoc[$swedishKey])) {
                $value = trim($assoc[$swedishKey]);

                // √ñvers√§tt v√§rdet om det finns i mapping
                if (isset($optionValueMapping[$value])) {
                    $value = $optionValueMapping[$value];
                }

                $newRow[$englishKey] = $value;
            }
        }

        ##########################################
        #  Extrahera produktkategori + skapa taggar
        ##########################################
        $categoryString = $assoc['Kategorier'] ?? $assoc['Categories'] ?? '';
        list($productType, $tags) = extractCategories($categoryString);

        $newRow['Product category'] = $productType;
        $newRow['Tags'] = $tags;


        ##################################################
        # S√§tt ifall den ska vara publiserad i store eller inte beroende p√• tidigare v√§rde i "Publicerad"
        ##################################################
        if (isset($newRow['Published on online store'])) {
            $pubVal = $newRow['Published on online store'];

            if ($pubVal === '1') {
                $newRow['Published on online store'] = 'TRUE';
            } elseif ($pubVal === '-1') {
                $newRow['Published on online store'] = 'FALSE';
            }
        }

        ##########################################
        #  Fyll i defaultv√§rden d√§r det saknas
        ##########################################
        foreach ($requiredFields as $requiredField => $defaultValue) {
            if (!isset($newRow[$requiredField]) || trim($newRow[$requiredField]) === '') {
                $newRow[$requiredField] = $defaultValue;
            }
        }

        ##################################################
        # L√§s in lagersaldo om f√§ltet finns
        ##################################################
        $stockRaw = '';

        if (isset($assoc['Lager'])) {
            $stockRaw = trim($assoc['Lager']);
        } elseif (isset($assoc['Stock'])) {
            $stockRaw = trim($assoc['Stock']);
        }

        $stockQty = is_numeric($stockRaw) ? (int)$stockRaw : 0;
        $newRow['Inventory quantity'] = $stockQty;

        ########################################################################
        # H√§mta v√§rde f√∂r restnoteringar fr√•n svenska eller engelska kolumnnamn #
        ########################################################################
        // Standard: anta att man inte ska till√•ta f√∂rs√§ljning vid 0/negativt lager
        $allowBackorders = false;

        // H√§mta backorder-flagga fr√•n svenska eller engelska kolumnrubrik
        $restockValue = strtolower(trim($assoc['Till√•t restnoteringar?'] ?? $assoc['Backorders allowed?'] ?? ''));

        // Om restnotering √§r satt till "notify" ‚Üí till√•t alltid f√∂rs√§ljning
        if ($restockValue === 'notify') {
            $allowBackorders = true;
        }

        // Om lagret √§r negativt ‚Äì tolka som att den √§r restnoterad √§nd√•
        if ($stockQty < 0) {
            $allowBackorders = true;
        }

        // S√§tt Shopify-f√§lt
        $newRow['Continue selling when out of stock'] = $allowBackorders ? 'TRUE' : 'FALSE';
        $newRow['Inventory policy'] = $allowBackorders ? 'continue' : 'deny';

        ###########################################
        ########## URL-KODNING AV BILDER ##########
        ###########################################
        if (!empty($newRow['Product image URL'])) {
            $imageSrc = trim($newRow['Product image URL']);

            // Dela upp flera bildl√§nkar p√• ", " (komma och mellanslag)
            $images = explode(', ', $imageSrc);

            // URL-koda varje bildl√§nk men bevara : och /
            $encodedImages = array_map(function ($img) {
                return rawurlencode_image($img);
            }, $images);

            // Sl√• ihop dem igen till kommaseparerad str√§ng
            $newRow['Product image URL'] = implode(', ', $encodedImages);
        }

        ##############################################
        # St√∂d f√∂r b√•de engelska och svenska kolumnnamn f√∂r active/draft status ####
        ##############################################
        $visibility = strtolower(trim(
            $assoc['Visibility in catalog'] ?? $assoc['Synlighet i katalog'] ?? ''
        ));

        if ($visibility === 'visible') {
            $newRow['Status'] = 'active';
        } elseif (in_array($visibility, ['hidden', 'search'], true)) {
            $newRow['Status'] = 'draft';
        } else {
            $newRow['Status'] = 'draft'; // fallback
        }

        ########################################################################
        #  Konvertera alla v√§rden som har f√∂rv√§ntad datatyp (pris, lager etc.)
        ########################################################################
        foreach ($expectedDataTypes as $field => $dataType) {
            if (isset($newRow[$field])) {
                $newRow[$field] = convertToType($newRow[$field], $dataType);
            }
        }

        ##################################################
        #  Generera ett URL-handle fr√•n titeln (f√∂r varianter i Shopify)  
        ##################################################
        $baseTitle = explode('-', $newRow['Title'] ?? '')[0] ?? '';
        $cleanHandle = sanitizeTitle($baseTitle);

        $productHandle = makeUniqueHandle($cleanHandle, $writtenHandles);  // ny variabel
        $newRow['URL handle'] = $productHandle;


        $products[$productHandle] = $products[$productHandle] ?? [
            'main' => null,
            'variants' => [],
            'images' => [],
            'seen_keys' => []
        ];

        ###MAIN PRODUKT L√ÑGGS TILL#####
        $products[$productHandle]['main'] = $newRow; 
        $totalProducts++;
        if (!empty($images)) {
            $products[$productHandle]['images'] = $images;
            $totalImages += count($images);
        }

        // Hantera variant
        elseif (isVariant($assoc)) {
            $sku = trim($newRow['SKU'] ?? '');

            if ($sku === '') {
                echo "‚ùå SKIPPING VARIANT WITHOUT SKU ‚Äì " . ($newRow['Title'] ?? '') . " | $handle\n";
                continue;
            }

            $opt1 = trim($newRow['Option1 value'] ?? '');
            $opt2 = trim($newRow['Option2 value'] ?? '');
            $opt3 = trim($newRow['Option3 value'] ?? '');

            // Om alla optioner saknas ‚Äì till√•t √§nd√• som variant
            if ($opt1 === '' && $opt2 === '' && $opt3 === '') {
                $products[$productHandle]['variants'][] = $newRow;
                continue;
            }

            // Identifiera variantnyckel
            $key = implode('|', [$opt1 ?: 'N/A', $opt2 ?: 'N/A', $opt3 ?: 'N/A', $sku]);

            // Initiera seen_keys om den inte finns
            if (!isset($products[$handle]['seen_keys'])) {
                $products[$handle]['seen_keys'] = [];
            }

            // Undvik duplikater
            if (!in_array($key, $products[$handle]['seen_keys'], true)) {
                $products[$productHandle]['variants'][] = $newRow;
                $products[$handle]['seen_keys'][] = $key;
            } else {
                echo "‚ùó SKIPPING DUPLICATE during READ ‚Äì $handle | $opt1, $opt2, $opt3 | SKU: $sku\n";
            }
        }
        // Om raden inte √§r igenk√§nd typ
        else {
            echo "‚ö†Ô∏è Skipping row {$rowCount} ‚Äì Typ ej igenk√§nd: '" . ($assoc['Typ'] ?? $assoc['Type'] ?? '') . "'\n";
            continue;
        }

    }

    ##################
    ##### WRITE ######
    ##################
    // √ñppna fil f√∂r skrivning
    $out = fopen($outputFile, 'w');

    // Skriv rubriker
    fputcsv($out, $finalHeader, $delimiter, '"', '\\');

    // Foot size-grupper
    $footSizeGroups = [
        "34-" => range(0, 35),
        "35-38" => range(35, 39),
        "39-42" => range(39, 43),
        "43-46" => range(43, 47)
    ];

    function getFootSizeGroup($size) {
        global $footSizeGroups;
        if (is_numeric($size)) {
            $size = (int)$size;
            foreach ($footSizeGroups as $group => $range) {
                if (in_array($size, $range)) return $group;
            }
        }
        return null;
    }

    foreach ($products as $handle => $data) {
        if (empty($data['main'])) continue;

        $mainProduct = $data['main'];
        $variants = $data['variants'];
        $images = $data['images'] ?? [];

        // Poppa f√∂rsta variant ‚Üí huvudprodukt
        if (!empty($variants)) {
            $firstVariant = array_shift($variants);
            foreach ($variantFields as $field) {
                if (isset($firstVariant[$field])) {
                    $mainProduct[$field] = $firstVariant[$field];
                }
            }
            if (!empty($firstVariant['Product image URL'])) {
                $mainProduct['Variant image URL'] = explode(", ", $firstVariant['Product image URL'])[0];
            }
        }

        // Gruppera fotstorleksvarianter
        $groupedVariants = [];
        $nonFootSizeVariants = [];

        foreach ($variants as $variant) {
            $assigned = false;
            foreach ([
                ['Option1 name', 'Option1 value'],
                ['Option2 name', 'Option2 value'],
                ['Option3 name', 'Option3 value']
            ] as [$nameKey, $valueKey]) {
                if (isset($variant[$nameKey]) && strpos($variant[$nameKey], 'Foot Size') !== false) {
                    $group = getFootSizeGroup($variant[$valueKey] ?? '');
                    if ($group !== null) {
                        $groupedVariants[$group][] = $variant;
                        $assigned = true;
                        break;
                    }
                }
            }
            if (!$assigned) $nonFootSizeVariants[] = $variant;
        }

        // Skriv Foot Size chunks
        foreach ($groupedVariants as $group => $groupVariants) {
            for ($i = 0; $i < count($groupVariants); $i += 90) {
                $chunk = array_slice($groupVariants, $i, 90);
                $suffix = ($i === 0) ? $group : "{$group}-" . (($i / 90) + 1);
                $newHandle = makeUniqueHandle("{$handle}-{$suffix}", $writtenHandles);
                $writtenHandles[] = $newHandle;

                $first = array_shift($chunk);
                $mainCopy = $mainProduct;
                foreach ($variantFields as $field) {
                    if (isset($first[$field])) $mainCopy[$field] = $first[$field];
                }
                foreach (["Option1 name","Option1 value","Option2 name","Option2 value","Option3 name","Option3 value"] as $key) {
                    $mainCopy[$key] = $first[$key] ?? '';
                }
                $mainCopy['URL handle'] = $newHandle;
                $mainCopy['Title'] = $mainProduct['Title'];
                if (!empty($images)) {
                    $mainCopy['Product image URL'] = $images[0];
                    $mainCopy['Variant image URL'] = $images[0];
                }

                fputcsv($out, array_map(fn($col) => $mainCopy[$col] ?? '', $finalHeader), $delimiter, '"', '\\');

                foreach (array_slice($images, 1) as $img) {
                    fputcsv($out, array_map(fn($col) =>
                        $col === 'URL handle' ? $newHandle :
                        ($col === 'Product image URL' ? $img : ''), $finalHeader), $delimiter, '"', '\\');
                }

                foreach ($chunk as $variant) {
                    $variant['URL handle'] = $newHandle;
                    $variant['Variant image URL'] = !empty($variant['Product image URL'])
                        ? explode(", ", $variant['Product image URL'])[0]
                        : ($images[0] ?? '');

                    foreach (["Title", "Description", "Vendor", "Product category", "Type", "Tags"] as $f) {
                        $variant[$f] = '';
                    }

                    fputcsv($out, array_map(fn($col) => $variant[$col] ?? '', $finalHeader), $delimiter, '"', '\\');
                    $totalVariants++;
                }
            }
        }

        // Skriv √∂vriga icke-foot size varianter i 90-grupper
        for ($i = 0; $i < count($nonFootSizeVariants); $i += 90) {
            $chunk = array_slice($nonFootSizeVariants, $i, 90);
            $suffix = $i === 0 ? '' : '-' . (($i / 90) + 1);
            $newHandle = makeUniqueHandle("{$handle}{$suffix}", $writtenHandles);
            $writtenHandles[] = $newHandle;

            $first = array_shift($chunk);
            $mainCopy = $mainProduct;
            foreach ($variantFields as $field) {
                if (isset($first[$field])) $mainCopy[$field] = $first[$field];
            }
            foreach (["Option1 name","Option1 value","Option2 name","Option2 value","Option3 name","Option3 value"] as $key) {
                $mainCopy[$key] = $first[$key] ?? '';
            }
            $mainCopy['URL handle'] = $newHandle;
            $mainCopy['Title'] = $i === 0 ? $mainProduct['Title'] : $mainProduct['Title'] . " - " . (($i / 90) + 1);
            if (!empty($images)) {
                $mainCopy['Product image URL'] = $images[0];
                $mainCopy['Variant image URL'] = $images[0];
            }

            fputcsv($out, array_map(fn($col) => $mainCopy[$col] ?? '', $finalHeader), $delimiter, '"', '\\');

            foreach (array_slice($images, 1) as $img) {
                fputcsv($out, array_map(fn($col) =>
                    $col === 'URL handle' ? $newHandle :
                    ($col === 'Product image URL' ? $img : ''), $finalHeader), $delimiter, '"', '\\');
            }

            foreach ($chunk as $variant) {
                $variant['URL handle'] = $newHandle;
                $variant['Variant image URL'] = !empty($variant['Product image URL'])
                    ? explode(", ", $variant['Product image URL'])[0]
                    : ($images[0] ?? '');

                foreach (["Title", "Description", "Vendor", "Product category", "Type", "Tags"] as $f) {
                    $variant[$f] = '';
                }

                fputcsv($out, array_map(fn($col) => $variant[$col] ?? '', $finalHeader), $delimiter, '"', '\\');
                $totalVariants++;
            }
        }

        // Produkter utan varianter
        if (empty($data['variants']) && empty($groupedVariants) && empty($nonFootSizeVariants)) {
            $uniqueHandle = makeUniqueHandle($handle, $writtenHandles);
            $writtenHandles[] = $uniqueHandle;
            $mainProduct['URL handle'] = $uniqueHandle;
            if (!empty($images)) {
                $mainProduct['Product image URL'] = $images[0];
                $mainProduct['Variant image URL'] = $images[0];
            }

            fputcsv($out, array_map(fn($col) => $mainProduct[$col] ?? '', $finalHeader), $delimiter, '"', '\\');

            foreach (array_slice($images, 1) as $img) {
                fputcsv($out, array_map(fn($col) =>
                    $col === 'URL handle' ? $uniqueHandle :
                    ($col === 'Product image URL' ? $img : ''), $finalHeader), $delimiter, '"', '\\');
            }
        }
    }

    fclose($out);
    echo "Shopify CSV created successfully: {$outputFile}" . ($maxRows === null ? " (ALL rows)" : " (first {$maxRows} rows)") . PHP_EOL;
    echo "\n Statistik:\n";
    echo "‚Ä¢ Antal produkter: $totalProducts\n";
    echo "‚Ä¢ Antal varianter: $totalVariants\n";
    echo "‚Ä¢ Antal bilder: $totalImages\n";
}


##################
##### MAIN #######
##################
# Main execution

// Definiera basmapp
$baseFolder = "C:\\Projects\\WooToShopifyConverter\\PHP";
$inputCsvPath = $baseFolder . DIRECTORY_SEPARATOR . "thsexport.csv";
$outputCsvPath = $baseFolder . DIRECTORY_SEPARATOR . "shopify_php_import.csv";

// V√§lj mapping baserat p√• rubriker
try {
    $mapping = chooseMappingFromFile($inputCsvPath, ','); // anv√§nder funktionen du redan portat

    // Anropa huvudlogik (motsvarighet till replace_header_and_transform_data i Python)
    replaceHeaderAndTransformData($inputCsvPath, $outputCsvPath, $mapping, ',', null);
} catch (Exception $e) {
    echo "üö® Fel: " . $e->getMessage();
}

?>